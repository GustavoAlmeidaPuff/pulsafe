{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Configuração dos níveis de prioridade baseados na imagem\nconst PRIORITY_LEVELS = {\n  VERMELHO: {\n    code: 'vermelho',\n    name: 'Emergência absoluta',\n    description: 'Risco iminente de morte, atendimento imediato',\n    maxTime: 'Imediato',\n    examples: 'Parada cardíaca, falta de ar grave, sangramento intenso, perda de consciência'\n  },\n  LARANJA: {\n    code: 'laranja',\n    name: 'Muito urgente',\n    description: 'Risco alto, pode piorar rapidamente',\n    maxTime: 'Até 10 min',\n    examples: 'Dor no peito forte, AVC em andamento, fratura exposta, queimadura grave'\n  },\n  AMARELO: {\n    code: 'amarelo',\n    name: 'Urgente moderado',\n    description: 'Precisa de atendimento, mas não é crítico naquele momento',\n    maxTime: 'Até 50 min',\n    examples: 'Febre alta com mal-estar, dor intensa mas estável, pequenos cortes com sangramento controlado'\n  },\n  VERDE: {\n    code: 'verde',\n    name: 'Pouco urgente',\n    description: 'Condição estável, pode esperar',\n    maxTime: 'Até 2 horas',\n    examples: 'Dor leve, sintomas gripais, pequenas torções'\n  },\n  AZUL: {\n    code: 'azul',\n    name: 'Não urgente',\n    description: 'Pode até ser caso ambulatorial',\n    maxTime: 'Até 4 horas',\n    examples: 'Pedido de receita, curativo simples, consulta de acompanhamento'\n  }\n};\nclass AITriageService {\n  constructor() {\n    // Use uma chave de API gratuita do Google Gemini\n    // Em produção, isso deveria vir de variáveis de ambiente\n    this.apiKey = null; // Será definida dinamicamente\n    this.genAI = null;\n    this.fallbackAnalysis = true; // Usar análise local se não houver API\n  }\n\n  // Configurar API key (pode ser chamado pelo usuário)\n  setApiKey(apiKey) {\n    this.apiKey = apiKey;\n    if (apiKey) {\n      this.genAI = new GoogleGenerativeAI(apiKey);\n      this.fallbackAnalysis = false;\n    }\n  }\n\n  // Análise local baseada em palavras-chave (fallback)\n  localAnalysis(symptoms) {\n    const symptomsLower = symptoms.toLowerCase();\n\n    // Palavras-chave para cada nível de prioridade\n    const keywords = {\n      vermelho: ['parada cardíaca', 'parou de respirar', 'inconsciente', 'desacordado', 'sangramento intenso', 'sangue muito', 'hemorragia', 'não responde', 'engasgado', 'asfixia', 'falta de ar grave', 'não consegue respirar', 'dor no peito intensa', 'infarto', 'derrame', 'convulsão', 'coma'],\n      laranja: ['dor no peito forte', 'dor peito', 'pressão no peito', 'avc', 'derrame cerebral', 'paralisia', 'não mexe braço', 'fratura exposta', 'osso quebrado', 'queimadura grave', 'febre muito alta', 'temperatura 40', 'delirando', 'vomitando sangue', 'sangue vomito', 'dificuldade respirar'],\n      amarelo: ['febre alta', 'temperatura alta', 'dor forte', 'dor intensa', 'vomitando muito', 'vômito', 'diarréia forte', 'desidratado', 'torção grave', 'machucado feio', 'corte profundo', 'dor abdominal forte', 'barriga doendo muito'],\n      verde: ['dor leve', 'dor pequena', 'gripado', 'resfriado', 'tosse', 'febre baixa', 'mal estar', 'tontura leve', 'enjoo', 'machucado pequeno', 'arranhão', 'torção leve'],\n      azul: ['receita', 'medicamento', 'consulta', 'acompanhamento', 'curativo', 'atestado', 'exame', 'resultado', 'check up', 'preventivo', 'rotina']\n    };\n\n    // Verificar palavras-chave por ordem de prioridade\n    for (const [level, words] of Object.entries(keywords)) {\n      for (const word of words) {\n        if (symptomsLower.includes(word)) {\n          return PRIORITY_LEVELS[level.toUpperCase()];\n        }\n      }\n    }\n\n    // Se não encontrou nenhuma palavra-chave específica, analisar contexto geral\n    if (symptomsLower.includes('dor') && (symptomsLower.includes('forte') || symptomsLower.includes('intensa'))) {\n      return PRIORITY_LEVELS.AMARELO;\n    }\n    if (symptomsLower.includes('sangue') || symptomsLower.includes('sangramento')) {\n      return PRIORITY_LEVELS.LARANJA;\n    }\n\n    // Default para verde se sintomas são genéricos\n    return PRIORITY_LEVELS.VERDE;\n  }\n\n  // Análise usando IA do Google Gemini\n  async aiAnalysis(symptoms) {\n    if (!this.genAI) {\n      throw new Error('API não configurada');\n    }\n    const model = this.genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\"\n    });\n    const prompt = `\nVocê é um sistema de triagem médica. Analise os sintomas fornecidos e classifique em um dos 5 níveis de prioridade abaixo.\n\nNÍVEIS DE PRIORIDADE:\n1. VERMELHO - Emergência absoluta (risco iminente de morte, atendimento imediato)\n   Exemplos: parada cardíaca, falta de ar grave, sangramento intenso, perda de consciência\n\n2. LARANJA - Muito urgente (risco alto, pode piorar rapidamente, até 10 min)\n   Exemplos: dor no peito forte, AVC em andamento, fratura exposta, queimadura grave\n\n3. AMARELO - Urgente moderado (precisa atendimento mas não crítico, até 50 min)\n   Exemplos: febre alta com mal-estar, dor intensa mas estável, cortes com sangramento controlado\n\n4. VERDE - Pouco urgente (condição estável, pode esperar até 2 horas)\n   Exemplos: dor leve, sintomas gripais, pequenas torções\n\n5. AZUL - Não urgente (pode ser caso ambulatorial, até 4 horas)\n   Exemplos: pedido de receita, curativo simples, consulta de acompanhamento\n\nSINTOMAS DO PACIENTE: \"${symptoms}\"\n\nResponda APENAS com uma das palavras: VERMELHO, LARANJA, AMARELO, VERDE, ou AZUL.\n`;\n    try {\n      const result = await model.generateContent(prompt);\n      const response = result.response;\n      const text = response.text().trim().toUpperCase();\n\n      // Validar resposta\n      if (Object.keys(PRIORITY_LEVELS).includes(text)) {\n        return PRIORITY_LEVELS[text];\n      } else {\n        // Fallback para análise local se IA retornar algo inválido\n        console.warn('Resposta inválida da IA, usando análise local');\n        return this.localAnalysis(symptoms);\n      }\n    } catch (error) {\n      console.error('Erro na análise de IA:', error);\n      // Fallback para análise local\n      return this.localAnalysis(symptoms);\n    }\n  }\n\n  // Método principal para analisar sintomas\n  async analyzeSymptoms(symptoms) {\n    if (!symptoms || symptoms.trim().length === 0) {\n      return PRIORITY_LEVELS.VERDE; // Default para não urgente se não há sintomas\n    }\n    try {\n      // Tentar usar IA se disponível, senão usar análise local\n      if (!this.fallbackAnalysis && this.genAI) {\n        return await this.aiAnalysis(symptoms);\n      } else {\n        return this.localAnalysis(symptoms);\n      }\n    } catch (error) {\n      console.error('Erro na análise de sintomas:', error);\n      // Sempre retornar análise local em caso de erro\n      return this.localAnalysis(symptoms);\n    }\n  }\n\n  // Converter prioridade para formato usado no sistema atual\n  getPriorityData(priority) {\n    const timeMapping = {\n      'Imediato': '00:30',\n      'Até 10 min': '10:00',\n      'Até 50 min': '50:00',\n      'Até 2 horas': '120:00',\n      'Até 4 horas': '240:00'\n    };\n    return {\n      prioridade: priority.code,\n      tempoEstimado: timeMapping[priority.maxTime] || '30:00',\n      nivel: priority.name,\n      descricao: priority.description\n    };\n  }\n}\n\n// Criar instância singleton\nconst aiTriageService = new AITriageService();\nexport default aiTriageService;\nexport { PRIORITY_LEVELS };","map":{"version":3,"names":["GoogleGenerativeAI","PRIORITY_LEVELS","VERMELHO","code","name","description","maxTime","examples","LARANJA","AMARELO","VERDE","AZUL","AITriageService","constructor","apiKey","genAI","fallbackAnalysis","setApiKey","localAnalysis","symptoms","symptomsLower","toLowerCase","keywords","vermelho","laranja","amarelo","verde","azul","level","words","Object","entries","word","includes","toUpperCase","aiAnalysis","Error","model","getGenerativeModel","prompt","result","generateContent","response","text","trim","keys","console","warn","error","analyzeSymptoms","length","getPriorityData","priority","timeMapping","prioridade","tempoEstimado","nivel","descricao","aiTriageService"],"sources":["/home/gustavo/code/pulsafe/src/services/aiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Configuração dos níveis de prioridade baseados na imagem\nconst PRIORITY_LEVELS = {\n  VERMELHO: {\n    code: 'vermelho',\n    name: 'Emergência absoluta',\n    description: 'Risco iminente de morte, atendimento imediato',\n    maxTime: 'Imediato',\n    examples: 'Parada cardíaca, falta de ar grave, sangramento intenso, perda de consciência'\n  },\n  LARANJA: {\n    code: 'laranja', \n    name: 'Muito urgente',\n    description: 'Risco alto, pode piorar rapidamente',\n    maxTime: 'Até 10 min',\n    examples: 'Dor no peito forte, AVC em andamento, fratura exposta, queimadura grave'\n  },\n  AMARELO: {\n    code: 'amarelo',\n    name: 'Urgente moderado',\n    description: 'Precisa de atendimento, mas não é crítico naquele momento',\n    maxTime: 'Até 50 min',\n    examples: 'Febre alta com mal-estar, dor intensa mas estável, pequenos cortes com sangramento controlado'\n  },\n  VERDE: {\n    code: 'verde',\n    name: 'Pouco urgente',\n    description: 'Condição estável, pode esperar',\n    maxTime: 'Até 2 horas',\n    examples: 'Dor leve, sintomas gripais, pequenas torções'\n  },\n  AZUL: {\n    code: 'azul',\n    name: 'Não urgente',\n    description: 'Pode até ser caso ambulatorial',\n    maxTime: 'Até 4 horas',\n    examples: 'Pedido de receita, curativo simples, consulta de acompanhamento'\n  }\n};\n\nclass AITriageService {\n  constructor() {\n    // Use uma chave de API gratuita do Google Gemini\n    // Em produção, isso deveria vir de variáveis de ambiente\n    this.apiKey = null; // Será definida dinamicamente\n    this.genAI = null;\n    this.fallbackAnalysis = true; // Usar análise local se não houver API\n  }\n\n  // Configurar API key (pode ser chamado pelo usuário)\n  setApiKey(apiKey) {\n    this.apiKey = apiKey;\n    if (apiKey) {\n      this.genAI = new GoogleGenerativeAI(apiKey);\n      this.fallbackAnalysis = false;\n    }\n  }\n\n  // Análise local baseada em palavras-chave (fallback)\n  localAnalysis(symptoms) {\n    const symptomsLower = symptoms.toLowerCase();\n    \n    // Palavras-chave para cada nível de prioridade\n    const keywords = {\n      vermelho: [\n        'parada cardíaca', 'parou de respirar', 'inconsciente', 'desacordado',\n        'sangramento intenso', 'sangue muito', 'hemorragia', 'não responde',\n        'engasgado', 'asfixia', 'falta de ar grave', 'não consegue respirar',\n        'dor no peito intensa', 'infarto', 'derrame', 'convulsão', 'coma'\n      ],\n      laranja: [\n        'dor no peito forte', 'dor peito', 'pressão no peito', \n        'avc', 'derrame cerebral', 'paralisia', 'não mexe braço',\n        'fratura exposta', 'osso quebrado', 'queimadura grave',\n        'febre muito alta', 'temperatura 40', 'delirando',\n        'vomitando sangue', 'sangue vomito', 'dificuldade respirar'\n      ],\n      amarelo: [\n        'febre alta', 'temperatura alta', 'dor forte', 'dor intensa',\n        'vomitando muito', 'vômito', 'diarréia forte', 'desidratado',\n        'torção grave', 'machucado feio', 'corte profundo',\n        'dor abdominal forte', 'barriga doendo muito'\n      ],\n      verde: [\n        'dor leve', 'dor pequena', 'gripado', 'resfriado', 'tosse',\n        'febre baixa', 'mal estar', 'tontura leve', 'enjoo',\n        'machucado pequeno', 'arranhão', 'torção leve'\n      ],\n      azul: [\n        'receita', 'medicamento', 'consulta', 'acompanhamento',\n        'curativo', 'atestado', 'exame', 'resultado',\n        'check up', 'preventivo', 'rotina'\n      ]\n    };\n\n    // Verificar palavras-chave por ordem de prioridade\n    for (const [level, words] of Object.entries(keywords)) {\n      for (const word of words) {\n        if (symptomsLower.includes(word)) {\n          return PRIORITY_LEVELS[level.toUpperCase()];\n        }\n      }\n    }\n\n    // Se não encontrou nenhuma palavra-chave específica, analisar contexto geral\n    if (symptomsLower.includes('dor') && \n        (symptomsLower.includes('forte') || symptomsLower.includes('intensa'))) {\n      return PRIORITY_LEVELS.AMARELO;\n    }\n    \n    if (symptomsLower.includes('sangue') || symptomsLower.includes('sangramento')) {\n      return PRIORITY_LEVELS.LARANJA;\n    }\n\n    // Default para verde se sintomas são genéricos\n    return PRIORITY_LEVELS.VERDE;\n  }\n\n  // Análise usando IA do Google Gemini\n  async aiAnalysis(symptoms) {\n    if (!this.genAI) {\n      throw new Error('API não configurada');\n    }\n\n    const model = this.genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n    \n    const prompt = `\nVocê é um sistema de triagem médica. Analise os sintomas fornecidos e classifique em um dos 5 níveis de prioridade abaixo.\n\nNÍVEIS DE PRIORIDADE:\n1. VERMELHO - Emergência absoluta (risco iminente de morte, atendimento imediato)\n   Exemplos: parada cardíaca, falta de ar grave, sangramento intenso, perda de consciência\n\n2. LARANJA - Muito urgente (risco alto, pode piorar rapidamente, até 10 min)\n   Exemplos: dor no peito forte, AVC em andamento, fratura exposta, queimadura grave\n\n3. AMARELO - Urgente moderado (precisa atendimento mas não crítico, até 50 min)\n   Exemplos: febre alta com mal-estar, dor intensa mas estável, cortes com sangramento controlado\n\n4. VERDE - Pouco urgente (condição estável, pode esperar até 2 horas)\n   Exemplos: dor leve, sintomas gripais, pequenas torções\n\n5. AZUL - Não urgente (pode ser caso ambulatorial, até 4 horas)\n   Exemplos: pedido de receita, curativo simples, consulta de acompanhamento\n\nSINTOMAS DO PACIENTE: \"${symptoms}\"\n\nResponda APENAS com uma das palavras: VERMELHO, LARANJA, AMARELO, VERDE, ou AZUL.\n`;\n\n    try {\n      const result = await model.generateContent(prompt);\n      const response = result.response;\n      const text = response.text().trim().toUpperCase();\n      \n      // Validar resposta\n      if (Object.keys(PRIORITY_LEVELS).includes(text)) {\n        return PRIORITY_LEVELS[text];\n      } else {\n        // Fallback para análise local se IA retornar algo inválido\n        console.warn('Resposta inválida da IA, usando análise local');\n        return this.localAnalysis(symptoms);\n      }\n    } catch (error) {\n      console.error('Erro na análise de IA:', error);\n      // Fallback para análise local\n      return this.localAnalysis(symptoms);\n    }\n  }\n\n  // Método principal para analisar sintomas\n  async analyzeSymptoms(symptoms) {\n    if (!symptoms || symptoms.trim().length === 0) {\n      return PRIORITY_LEVELS.VERDE; // Default para não urgente se não há sintomas\n    }\n\n    try {\n      // Tentar usar IA se disponível, senão usar análise local\n      if (!this.fallbackAnalysis && this.genAI) {\n        return await this.aiAnalysis(symptoms);\n      } else {\n        return this.localAnalysis(symptoms);\n      }\n    } catch (error) {\n      console.error('Erro na análise de sintomas:', error);\n      // Sempre retornar análise local em caso de erro\n      return this.localAnalysis(symptoms);\n    }\n  }\n\n  // Converter prioridade para formato usado no sistema atual\n  getPriorityData(priority) {\n    const timeMapping = {\n      'Imediato': '00:30',\n      'Até 10 min': '10:00', \n      'Até 50 min': '50:00',\n      'Até 2 horas': '120:00',\n      'Até 4 horas': '240:00'\n    };\n\n    return {\n      prioridade: priority.code,\n      tempoEstimado: timeMapping[priority.maxTime] || '30:00',\n      nivel: priority.name,\n      descricao: priority.description\n    };\n  }\n}\n\n// Criar instância singleton\nconst aiTriageService = new AITriageService();\n\nexport default aiTriageService;\nexport { PRIORITY_LEVELS };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}