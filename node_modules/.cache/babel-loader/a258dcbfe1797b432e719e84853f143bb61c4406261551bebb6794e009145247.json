{"ast":null,"code":"import axios from 'axios';\nclass InfermedicaService {\n  constructor() {\n    // Para usar a API real da Infermedica, você precisará:\n    // 1. Registrar-se em https://developer.infermedica.com/\n    // 2. Obter App-Id e App-Key\n    // 3. Substituir os valores abaixo pelos reais\n    this.apiUrl = 'https://api.infermedica.com/v3';\n    this.appId = 'YOUR_APP_ID'; // Substitua pelo seu App-Id real\n    this.appKey = 'YOUR_APP_KEY'; // Substitua pela sua App-Key real\n\n    // Para demonstração, vamos usar um mock da API\n    this.useMockApi = true;\n  }\n\n  // Mapeia os níveis de triagem da Infermedica para as cores do sistema\n  mapTriageToColor(triageLevel) {\n    const mapping = {\n      'emergency_ambulance': 'vermelho',\n      // Emergência absoluta\n      'emergency': 'vermelho',\n      // Emergência absoluta  \n      'consultation_24': 'laranja',\n      // Muito urgente (até 10 min)\n      'consultation': 'amarelo',\n      // Urgente moderado (até 50 min)\n      'self_care': 'verde' // Pouco urgente (até 2 horas)\n    };\n    return mapping[triageLevel] || 'azul'; // Default para não urgente\n  }\n\n  // Mapeia cor para tempo estimado\n  mapColorToTime(color) {\n    const timeMapping = {\n      'vermelho': '05:00',\n      // Imediato\n      'laranja': '10:00',\n      // Até 10 min\n      'amarelo': '50:00',\n      // Até 50 min\n      'verde': '120:00',\n      // Até 2 horas\n      'azul': '240:00' // Até 4 horas\n    };\n    return timeMapping[color] || '40:00';\n  }\n\n  // Extrai sintomas-chave do texto para simular análise\n  extractSymptoms(text) {\n    const symptoms = [];\n    const textLower = text.toLowerCase();\n\n    // Sintomas críticos (vermelho)\n    if (textLower.includes('dor no peito') || textLower.includes('dor torácica')) {\n      symptoms.push({\n        id: 's_102',\n        choice_id: 'present'\n      }); // Chest pain\n    }\n    if (textLower.includes('falta de ar') || textLower.includes('dificuldade para respirar')) {\n      symptoms.push({\n        id: 's_98',\n        choice_id: 'present'\n      }); // Shortness of breath\n    }\n    if (textLower.includes('desmaio') || textLower.includes('perda de consciência')) {\n      symptoms.push({\n        id: 's_305',\n        choice_id: 'present'\n      }); // Loss of consciousness\n    }\n    if (textLower.includes('sangramento') || textLower.includes('hemorragia')) {\n      symptoms.push({\n        id: 's_23',\n        choice_id: 'present'\n      }); // Bleeding\n    }\n\n    // Sintomas urgentes (laranja)\n    if (textLower.includes('dor de cabeça intensa') || textLower.includes('cefaleia intensa')) {\n      symptoms.push({\n        id: 's_1193',\n        choice_id: 'present'\n      }); // Severe headache\n    }\n    if (textLower.includes('fratura') || textLower.includes('osso quebrado')) {\n      symptoms.push({\n        id: 's_147',\n        choice_id: 'present'\n      }); // Bone fracture\n    }\n\n    // Sintomas moderados (amarelo)\n    if (textLower.includes('febre alta') || textLower.includes('temperatura alta')) {\n      symptoms.push({\n        id: 's_105',\n        choice_id: 'present'\n      }); // High fever\n    }\n    if (textLower.includes('vômito') || textLower.includes('vomitando')) {\n      symptoms.push({\n        id: 's_1994',\n        choice_id: 'present'\n      }); // Vomiting\n    }\n    if (textLower.includes('dor intensa')) {\n      symptoms.push({\n        id: 's_1967',\n        choice_id: 'present'\n      }); // Severe pain\n    }\n\n    // Sintomas leves (verde)\n    if (textLower.includes('dor leve') || textLower.includes('desconforto')) {\n      symptoms.push({\n        id: 's_1962',\n        choice_id: 'present'\n      }); // Mild pain\n    }\n    if (textLower.includes('sintomas gripais') || textLower.includes('gripe')) {\n      symptoms.push({\n        id: 's_155',\n        choice_id: 'present'\n      }); // Flu symptoms\n    }\n    return symptoms;\n  }\n\n  // Mock da API para demonstração\n  mockTriageResponse(symptoms) {\n    // Simula resposta baseada nos sintomas detectados\n    let triageLevel = 'self_care';\n    let serious = [];\n    const hasEmergencySymptoms = symptoms.some(s => ['s_102', 's_98', 's_305', 's_23'].includes(s.id));\n    const hasUrgentSymptoms = symptoms.some(s => ['s_1193', 's_147'].includes(s.id));\n    const hasModerateSymptoms = symptoms.some(s => ['s_105', 's_1994', 's_1967'].includes(s.id));\n    if (hasEmergencySymptoms) {\n      triageLevel = 'emergency';\n      serious = symptoms.filter(s => ['s_102', 's_98', 's_305', 's_23'].includes(s.id));\n    } else if (hasUrgentSymptoms) {\n      triageLevel = 'consultation_24';\n      serious = symptoms.filter(s => ['s_1193', 's_147'].includes(s.id));\n    } else if (hasModerateSymptoms) {\n      triageLevel = 'consultation';\n    }\n    return {\n      triage_level: triageLevel,\n      serious: serious.map(s => ({\n        id: s.id,\n        seriousness: hasEmergencySymptoms ? 'emergency' : 'serious'\n      })),\n      root_cause: hasEmergencySymptoms ? 'emergency_evidence_present' : hasUrgentSymptoms ? 'serious_evidence_present' : 'self_care_sufficient'\n    };\n  }\n\n  // Função principal de triagem\n  async performTriage(patientData) {\n    try {\n      const {\n        sintomas,\n        idade = 30,\n        sexo = 'male'\n      } = patientData;\n\n      // Extrai sintomas do texto\n      const symptoms = this.extractSymptoms(sintomas);\n      let response;\n      if (this.useMockApi || !this.appId.startsWith('YOUR_')) {\n        // Usa mock para demonstração\n        response = {\n          data: this.mockTriageResponse(symptoms)\n        };\n      } else {\n        // Chama API real da Infermedica\n        const requestData = {\n          sex: sexo,\n          age: {\n            value: idade\n          },\n          evidence: symptoms\n        };\n        response = await axios.post(`${this.apiUrl}/triage`, requestData, {\n          headers: {\n            'App-Id': this.appId,\n            'App-Key': this.appKey,\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n      const triageResult = response.data;\n      const color = this.mapTriageToColor(triageResult.triage_level);\n      const tempoEstimado = this.mapColorToTime(color);\n      return {\n        prioridade: color,\n        tempoEstimado,\n        nivel: triageResult.triage_level,\n        sintomasSerios: triageResult.serious || [],\n        motivoTriagem: triageResult.root_cause,\n        confidence: this.getConfidenceLevel(triageResult.triage_level),\n        recomendacao: this.getRecommendation(triageResult.triage_level)\n      };\n    } catch (error) {\n      console.error('Erro na triagem:', error);\n\n      // Fallback para triagem básica em caso de erro\n      return this.fallbackTriage(patientData.sintomas);\n    }\n  }\n\n  // Triagem básica como fallback\n  fallbackTriage(sintomas) {\n    const sintomasTexto = sintomas.toLowerCase();\n\n    // Lógica de fallback similar à original\n    if (sintomasTexto.includes('dor no peito') || sintomasTexto.includes('falta de ar') || sintomasTexto.includes('desmaio') || sintomasTexto.includes('sangramento')) {\n      return {\n        prioridade: 'vermelho',\n        tempoEstimado: '05:00',\n        nivel: 'emergency',\n        confidence: 'alta',\n        recomendacao: 'Procure atendimento de emergência imediatamente'\n      };\n    } else if (sintomasTexto.includes('febre alta') || sintomasTexto.includes('dor intensa') || sintomasTexto.includes('vomito')) {\n      return {\n        prioridade: 'amarelo',\n        tempoEstimado: '20:00',\n        nivel: 'consultation',\n        confidence: 'média',\n        recomendacao: 'Consulte um médico em até 24 horas'\n      };\n    } else if (sintomasTexto.includes('febre') || sintomasTexto.includes('dor') || sintomasTexto.includes('tontura')) {\n      return {\n        prioridade: 'azul',\n        tempoEstimado: '30:00',\n        nivel: 'consultation',\n        confidence: 'média',\n        recomendacao: 'Agende uma consulta médica'\n      };\n    }\n    return {\n      prioridade: 'verde',\n      tempoEstimado: '40:00',\n      nivel: 'self_care',\n      confidence: 'baixa',\n      recomendacao: 'Monitore os sintomas e cuide-se'\n    };\n  }\n  getConfidenceLevel(triageLevel) {\n    const confidence = {\n      'emergency_ambulance': 'muito alta',\n      'emergency': 'alta',\n      'consultation_24': 'alta',\n      'consultation': 'média',\n      'self_care': 'baixa'\n    };\n    return confidence[triageLevel] || 'média';\n  }\n  getRecommendation(triageLevel) {\n    const recommendations = {\n      'emergency_ambulance': 'Chame uma ambulância IMEDIATAMENTE! É uma emergência.',\n      'emergency': 'Vá para o pronto-socorro AGORA! Não espere.',\n      'consultation_24': 'Procure atendimento médico nas próximas horas.',\n      'consultation': 'Agende uma consulta médica quando possível.',\n      'self_care': 'Monitore seus sintomas. Se piorarem, procure ajuda médica.'\n    };\n    return recommendations[triageLevel] || 'Consulte um profissional de saúde.';\n  }\n\n  // Método para configurar credenciais da API real\n  setCredentials(appId, appKey) {\n    this.appId = appId;\n    this.appKey = appKey;\n    this.useMockApi = false;\n  }\n}\nexport default new InfermedicaService();","map":{"version":3,"names":["axios","InfermedicaService","constructor","apiUrl","appId","appKey","useMockApi","mapTriageToColor","triageLevel","mapping","mapColorToTime","color","timeMapping","extractSymptoms","text","symptoms","textLower","toLowerCase","includes","push","id","choice_id","mockTriageResponse","serious","hasEmergencySymptoms","some","s","hasUrgentSymptoms","hasModerateSymptoms","filter","triage_level","map","seriousness","root_cause","performTriage","patientData","sintomas","idade","sexo","response","startsWith","data","requestData","sex","age","value","evidence","post","headers","triageResult","tempoEstimado","prioridade","nivel","sintomasSerios","motivoTriagem","confidence","getConfidenceLevel","recomendacao","getRecommendation","error","console","fallbackTriage","sintomasTexto","recommendations","setCredentials"],"sources":["/home/gustavo/code/pulsafe/src/services/infermedicaService.js"],"sourcesContent":["import axios from 'axios';\n\nclass InfermedicaService {\n  constructor() {\n    // Para usar a API real da Infermedica, você precisará:\n    // 1. Registrar-se em https://developer.infermedica.com/\n    // 2. Obter App-Id e App-Key\n    // 3. Substituir os valores abaixo pelos reais\n    this.apiUrl = 'https://api.infermedica.com/v3';\n    this.appId = 'YOUR_APP_ID'; // Substitua pelo seu App-Id real\n    this.appKey = 'YOUR_APP_KEY'; // Substitua pela sua App-Key real\n    \n    // Para demonstração, vamos usar um mock da API\n    this.useMockApi = true;\n  }\n\n  // Mapeia os níveis de triagem da Infermedica para as cores do sistema\n  mapTriageToColor(triageLevel) {\n    const mapping = {\n      'emergency_ambulance': 'vermelho',  // Emergência absoluta\n      'emergency': 'vermelho',            // Emergência absoluta  \n      'consultation_24': 'laranja',       // Muito urgente (até 10 min)\n      'consultation': 'amarelo',          // Urgente moderado (até 50 min)\n      'self_care': 'verde'               // Pouco urgente (até 2 horas)\n    };\n    \n    return mapping[triageLevel] || 'azul'; // Default para não urgente\n  }\n\n  // Mapeia cor para tempo estimado\n  mapColorToTime(color) {\n    const timeMapping = {\n      'vermelho': '05:00',  // Imediato\n      'laranja': '10:00',   // Até 10 min\n      'amarelo': '50:00',   // Até 50 min\n      'verde': '120:00',    // Até 2 horas\n      'azul': '240:00'      // Até 4 horas\n    };\n    \n    return timeMapping[color] || '40:00';\n  }\n\n  // Extrai sintomas-chave do texto para simular análise\n  extractSymptoms(text) {\n    const symptoms = [];\n    const textLower = text.toLowerCase();\n    \n    // Sintomas críticos (vermelho)\n    if (textLower.includes('dor no peito') || \n        textLower.includes('dor torácica')) {\n      symptoms.push({ id: 's_102', choice_id: 'present' }); // Chest pain\n    }\n    \n    if (textLower.includes('falta de ar') || \n        textLower.includes('dificuldade para respirar')) {\n      symptoms.push({ id: 's_98', choice_id: 'present' }); // Shortness of breath\n    }\n    \n    if (textLower.includes('desmaio') || \n        textLower.includes('perda de consciência')) {\n      symptoms.push({ id: 's_305', choice_id: 'present' }); // Loss of consciousness\n    }\n    \n    if (textLower.includes('sangramento') || \n        textLower.includes('hemorragia')) {\n      symptoms.push({ id: 's_23', choice_id: 'present' }); // Bleeding\n    }\n\n    // Sintomas urgentes (laranja)\n    if (textLower.includes('dor de cabeça intensa') || \n        textLower.includes('cefaleia intensa')) {\n      symptoms.push({ id: 's_1193', choice_id: 'present' }); // Severe headache\n    }\n\n    if (textLower.includes('fratura') || \n        textLower.includes('osso quebrado')) {\n      symptoms.push({ id: 's_147', choice_id: 'present' }); // Bone fracture\n    }\n\n    // Sintomas moderados (amarelo)\n    if (textLower.includes('febre alta') || \n        textLower.includes('temperatura alta')) {\n      symptoms.push({ id: 's_105', choice_id: 'present' }); // High fever\n    }\n    \n    if (textLower.includes('vômito') || \n        textLower.includes('vomitando')) {\n      symptoms.push({ id: 's_1994', choice_id: 'present' }); // Vomiting\n    }\n    \n    if (textLower.includes('dor intensa')) {\n      symptoms.push({ id: 's_1967', choice_id: 'present' }); // Severe pain\n    }\n\n    // Sintomas leves (verde)\n    if (textLower.includes('dor leve') || \n        textLower.includes('desconforto')) {\n      symptoms.push({ id: 's_1962', choice_id: 'present' }); // Mild pain\n    }\n    \n    if (textLower.includes('sintomas gripais') || \n        textLower.includes('gripe')) {\n      symptoms.push({ id: 's_155', choice_id: 'present' }); // Flu symptoms\n    }\n\n    return symptoms;\n  }\n\n  // Mock da API para demonstração\n  mockTriageResponse(symptoms) {\n    // Simula resposta baseada nos sintomas detectados\n    let triageLevel = 'self_care';\n    let serious = [];\n    \n    const hasEmergencySymptoms = symptoms.some(s => \n      ['s_102', 's_98', 's_305', 's_23'].includes(s.id));\n    \n    const hasUrgentSymptoms = symptoms.some(s => \n      ['s_1193', 's_147'].includes(s.id));\n    \n    const hasModerateSymptoms = symptoms.some(s => \n      ['s_105', 's_1994', 's_1967'].includes(s.id));\n\n    if (hasEmergencySymptoms) {\n      triageLevel = 'emergency';\n      serious = symptoms.filter(s => \n        ['s_102', 's_98', 's_305', 's_23'].includes(s.id));\n    } else if (hasUrgentSymptoms) {\n      triageLevel = 'consultation_24';\n      serious = symptoms.filter(s => \n        ['s_1193', 's_147'].includes(s.id));\n    } else if (hasModerateSymptoms) {\n      triageLevel = 'consultation';\n    }\n\n    return {\n      triage_level: triageLevel,\n      serious: serious.map(s => ({\n        id: s.id,\n        seriousness: hasEmergencySymptoms ? 'emergency' : 'serious'\n      })),\n      root_cause: hasEmergencySymptoms ? 'emergency_evidence_present' : \n                 hasUrgentSymptoms ? 'serious_evidence_present' : \n                 'self_care_sufficient'\n    };\n  }\n\n  // Função principal de triagem\n  async performTriage(patientData) {\n    try {\n      const { sintomas, idade = 30, sexo = 'male' } = patientData;\n      \n      // Extrai sintomas do texto\n      const symptoms = this.extractSymptoms(sintomas);\n      \n      let response;\n      \n      if (this.useMockApi || !this.appId.startsWith('YOUR_')) {\n        // Usa mock para demonstração\n        response = { data: this.mockTriageResponse(symptoms) };\n      } else {\n        // Chama API real da Infermedica\n        const requestData = {\n          sex: sexo,\n          age: { value: idade },\n          evidence: symptoms\n        };\n\n        response = await axios.post(`${this.apiUrl}/triage`, requestData, {\n          headers: {\n            'App-Id': this.appId,\n            'App-Key': this.appKey,\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n\n      const triageResult = response.data;\n      const color = this.mapTriageToColor(triageResult.triage_level);\n      const tempoEstimado = this.mapColorToTime(color);\n\n      return {\n        prioridade: color,\n        tempoEstimado,\n        nivel: triageResult.triage_level,\n        sintomasSerios: triageResult.serious || [],\n        motivoTriagem: triageResult.root_cause,\n        confidence: this.getConfidenceLevel(triageResult.triage_level),\n        recomendacao: this.getRecommendation(triageResult.triage_level)\n      };\n\n    } catch (error) {\n      console.error('Erro na triagem:', error);\n      \n      // Fallback para triagem básica em caso de erro\n      return this.fallbackTriage(patientData.sintomas);\n    }\n  }\n\n  // Triagem básica como fallback\n  fallbackTriage(sintomas) {\n    const sintomasTexto = sintomas.toLowerCase();\n    \n    // Lógica de fallback similar à original\n    if (sintomasTexto.includes('dor no peito') || \n        sintomasTexto.includes('falta de ar') || \n        sintomasTexto.includes('desmaio') ||\n        sintomasTexto.includes('sangramento')) {\n      return {\n        prioridade: 'vermelho',\n        tempoEstimado: '05:00',\n        nivel: 'emergency',\n        confidence: 'alta',\n        recomendacao: 'Procure atendimento de emergência imediatamente'\n      };\n    } else if (sintomasTexto.includes('febre alta') || \n               sintomasTexto.includes('dor intensa') ||\n               sintomasTexto.includes('vomito')) {\n      return {\n        prioridade: 'amarelo',\n        tempoEstimado: '20:00',\n        nivel: 'consultation',\n        confidence: 'média',\n        recomendacao: 'Consulte um médico em até 24 horas'\n      };\n    } else if (sintomasTexto.includes('febre') || \n               sintomasTexto.includes('dor') ||\n               sintomasTexto.includes('tontura')) {\n      return {\n        prioridade: 'azul',\n        tempoEstimado: '30:00',\n        nivel: 'consultation',\n        confidence: 'média',\n        recomendacao: 'Agende uma consulta médica'\n      };\n    }\n\n    return {\n      prioridade: 'verde',\n      tempoEstimado: '40:00',\n      nivel: 'self_care',\n      confidence: 'baixa',\n      recomendacao: 'Monitore os sintomas e cuide-se'\n    };\n  }\n\n  getConfidenceLevel(triageLevel) {\n    const confidence = {\n      'emergency_ambulance': 'muito alta',\n      'emergency': 'alta',\n      'consultation_24': 'alta',\n      'consultation': 'média',\n      'self_care': 'baixa'\n    };\n    \n    return confidence[triageLevel] || 'média';\n  }\n\n  getRecommendation(triageLevel) {\n    const recommendations = {\n      'emergency_ambulance': 'Chame uma ambulância IMEDIATAMENTE! É uma emergência.',\n      'emergency': 'Vá para o pronto-socorro AGORA! Não espere.',\n      'consultation_24': 'Procure atendimento médico nas próximas horas.',\n      'consultation': 'Agende uma consulta médica quando possível.',\n      'self_care': 'Monitore seus sintomas. Se piorarem, procure ajuda médica.'\n    };\n    \n    return recommendations[triageLevel] || 'Consulte um profissional de saúde.';\n  }\n\n  // Método para configurar credenciais da API real\n  setCredentials(appId, appKey) {\n    this.appId = appId;\n    this.appKey = appKey;\n    this.useMockApi = false;\n  }\n}\n\nexport default new InfermedicaService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}